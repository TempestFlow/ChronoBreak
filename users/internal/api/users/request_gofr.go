// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
// versions:
// 	gofr-cli v0.6.0
// 	gofr.dev v1.37.0
// 	source: users.proto


package v1

import (
	"context"
	"fmt"
	"reflect"
)

// Request Wrappers
type LogoutRequestWrapper struct {
	ctx context.Context
	*LogoutRequest
}

func (h *LogoutRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *LogoutRequestWrapper) Param(s string) string {
	return ""
}

func (h *LogoutRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *LogoutRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.LogoutRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *LogoutRequestWrapper) HostName() string {
	return ""
}

func (h *LogoutRequestWrapper) Params(s string) []string {
	return nil
}
type ValidateRequestWrapper struct {
	ctx context.Context
	*ValidateRequest
}

func (h *ValidateRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *ValidateRequestWrapper) Param(s string) string {
	return ""
}

func (h *ValidateRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *ValidateRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.ValidateRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *ValidateRequestWrapper) HostName() string {
	return ""
}

func (h *ValidateRequestWrapper) Params(s string) []string {
	return nil
}
type LoginRequestWrapper struct {
	ctx context.Context
	*LoginRequest
}

func (h *LoginRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *LoginRequestWrapper) Param(s string) string {
	return ""
}

func (h *LoginRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *LoginRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.LoginRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *LoginRequestWrapper) HostName() string {
	return ""
}

func (h *LoginRequestWrapper) Params(s string) []string {
	return nil
}
type SignupRequestWrapper struct {
	ctx context.Context
	*SignupRequest
}

func (h *SignupRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *SignupRequestWrapper) Param(s string) string {
	return ""
}

func (h *SignupRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *SignupRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.SignupRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *SignupRequestWrapper) HostName() string {
	return ""
}

func (h *SignupRequestWrapper) Params(s string) []string {
	return nil
}
type RefreshTokenRequestWrapper struct {
	ctx context.Context
	*RefreshTokenRequest
}

func (h *RefreshTokenRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *RefreshTokenRequestWrapper) Param(s string) string {
	return ""
}

func (h *RefreshTokenRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *RefreshTokenRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.RefreshTokenRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *RefreshTokenRequestWrapper) HostName() string {
	return ""
}

func (h *RefreshTokenRequestWrapper) Params(s string) []string {
	return nil
}
type GetUserRequestWrapper struct {
	ctx context.Context
	*GetUserRequest
}

func (h *GetUserRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *GetUserRequestWrapper) Param(s string) string {
	return ""
}

func (h *GetUserRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *GetUserRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.GetUserRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *GetUserRequestWrapper) HostName() string {
	return ""
}

func (h *GetUserRequestWrapper) Params(s string) []string {
	return nil
}
type GetUserByIDRequestWrapper struct {
	ctx context.Context
	*GetUserByIDRequest
}

func (h *GetUserByIDRequestWrapper) Context() context.Context {
	return h.ctx
}

func (h *GetUserByIDRequestWrapper) Param(s string) string {
	return ""
}

func (h *GetUserByIDRequestWrapper) PathParam(s string) string {
	return ""
}

func (h *GetUserByIDRequestWrapper) Bind(p interface{}) error {
	ptr := reflect.ValueOf(p)
	if ptr.Kind() != reflect.Ptr {
		return fmt.Errorf("expected a pointer, got %T", p)
	}

	hValue := reflect.ValueOf(h.GetUserByIDRequest).Elem()
	ptrValue := ptr.Elem()

	for i := 0; i < hValue.NumField(); i++ {
		field := hValue.Type().Field(i)
		if field.Name == "state" || field.Name == "sizeCache" || field.Name == "unknownFields" {
			continue
		}

		if field.IsExported() {
			ptrValue.Field(i).Set(hValue.Field(i))
		}
	}

	return nil
}

func (h *GetUserByIDRequestWrapper) HostName() string {
	return ""
}

func (h *GetUserByIDRequestWrapper) Params(s string) []string {
	return nil
}